{"mappings":"MAAAA,EAAiBC,KAAKC,MAAM,wgNCA5B,MAAMC,EAAO,CACXC,KAAMC,SAASC,eAAe,eC2BhC,SAAwCC,EAAKC,GAC3C,MAAMC,EAASF,EACZG,KAAI,EAACC,SAAEA,EAAQC,KAAEA,GAAQC,IACjB,uIAIEA,EAAQ,yFACyDF,8EACXC,mCAIhEE,KAAK,IAERN,EAAQO,mBAAmB,YAAaN,E,CCvC1C,CAA+BT,EAAAgB,aAAcb,EAAKC","sources":["src/js/items/comands-github-items.json","src/js/common/const.js","src/js/helpers/function-rendering-items.js","src/js/comands-github.js"],"sourcesContent":["[\n  {\n    \"nameText\": \"git config --global user.name 'Your Name'\",\n    \"text\": \"Встанови ім`я користувача наступною командою: Замість 'Your Name' введи своє реальне ім`я або псевдонім, під яким хочеш з`являтися в історії комітів\"\n  },\n\n  {\n    \"nameText\": \"git config --global user.email 'Your email'\",\n    \"text\": \"Встанови електронну пошту командою:: Замість 'Your email' введи свою реальну електронну адресу\"\n  },\n\n  {\n    \"nameText\": \"git config --list\",\n    \"text\": \"Ти маєш побачити своє ім`я користувача та електронну пошту у списку налаштувань\"\n  },\n\n  {\n    \"nameText\": \"git clone https://посилання_на_репозиторій\",\n    \"text\": \"Клонуєте репозиторій\"\n  },\n  {\n    \"nameText\": \"git branch\",\n    \"text\": \"Знати на який гільці ти знаходишся\"\n  },\n\n  {\n    \"nameText\": \"git branch 'назва-нової-гілки'\",\n    \"text\": \"Створює нову гілку і залишається на main\"\n  },\n\n  {\n    \"nameText\": \"git checkout -b 'назва-нової-гілки' або git switch -c 'назва-нової-гілки'\",\n    \"text\": \"Створює нову гілку і переходить на неї\"\n  },\n\n  {\n    \"nameText\": \"git checkout 'назва-гілки' або git switch 'назва-гілки'\",\n    \"text\": \"Перехід на гілку яку створив\"\n  },\n\n  {\n    \"nameText\": \"git add . потім git commit -m“назва-коміта”\",\n    \"text\": \"Записує зміни до локальної гілки\"\n  },\n\n  {\n    \"nameText\": \"git push origin -u 'назва-вашої-гілки'\",\n    \"text\": \"Створює гілку на git hub і публікує зміни\"\n  },\n\n  {\n    \"nameText\": \"git push\",\n    \"text\": \"Публікує ваші зміни на гілку якщо гілка створена на git hub\"\n  },\n\n  {\n    \"nameText\": \"git stash\",\n    \"text\": \"Коли ви ще не робили git add, git commit i git push, ця команда ховає наш код по типу Ctrl X\"\n  },\n\n  {\n    \"nameText\": \"git stash save 'назва коміту'\",\n    \"text\": \"Оскільки ти можеш мати декілька стешів, щоб уникнути плутанини, рекомендується додавати коментар при створенні нового стеша. Це можна зробити за допомогою опції save, наприклад, ось так: git stash save 'my-comment'\"\n  },\n\n  {\n    \"nameText\": \"git stash list\",\n    \"text\": \"Кожен стек (збережені незавершені зміни) зберігається з унікальним ідентифікатором та описом, що дозволяє легко ідентифікувати відкладені зміни\"\n  },\n\n  {\n    \"nameText\": \"git stash pop\",\n    \"text\": \"Щоб застосувати найостанніші відкладені зміни і видалити їх із стеку\"\n  },\n\n  {\n    \"nameText\": \"git stash apply stash@{<number_stash>}\",\n    \"text\": \"Якщо ти хочеш застосувати певний stash без його видалення із стеку git stash apply stash@{56f4530}\"\n  },\n\n  {\n    \"nameText\": \"git stash drop stash@{<number_stash>}\",\n    \"text\": \"Щоб видалити конкретний stash із списку git stash drop stash@{56f4530}\"\n  },\n\n  {\n    \"nameText\": \"git stash clear\",\n    \"text\": \"Для видалення усіх збережених стеків змін, використовуй\"\n  },\n\n  {\n    \"nameText\": \"git stash apply\",\n    \"text\": \"Повернути ваш незакомічений код\"\n  },\n\n  {\n    \"nameText\": \"git pull\",\n    \"text\": \"Стягуємо на ту гілку на якій ви знаходитесь всі зміни\"\n  },\n\n  {\n    \"nameText\": \"git pull origin 'назва-вашої-гілки'\",\n    \"text\": \"Це оновить вашу локальну копію 'назва-вашої-гілки' гілки із віддаленого репозиторію і якщо була прийнята гілка її не трабо окремо видаляти локально вона оновиться як на github тобто сама видалится\"\n  },\n\n  {\n    \"nameText\": \"git fetch\",\n    \"text\": \"Так, виправдано. Команда git fetch оновлює локальну копію гілки main інколи вона називається 'remote-tracking branch'), а також інші гілки, які ви стежите за ними, але не оновлює вашу поточну робочу гілку, таку як header. Вона завантажує всі зміни з віддаленого репозиторію, дозволяючи вам переглянути їх, але не зливає їх автоматично. Після цього ви можете вирішити, як обробити ці зміни, наприклад, злити їх у вашу поточну робочу гілку за допомогою git merge або git rebase.\"\n  },\n\n  {\n    \"nameText\": \"git merge 'назва-гілки'\",\n    \"text\": \" Це робить тім лід - після того як перевірили код і одобрили в гильці (header) в який ми робили треба перейти на main і вести команду git merge header тоді все підтянется в main і після цього робимо git push з main і оновлюємо гілочку main на github\"\n  },\n\n  {\n    \"nameText\": \"git branch -d ‘назва-гілки’ або git branch -D ‘назва-гілки’\",\n    \"text\": \"Видалення у себе VScode гілки ‘назва-гілки’ але ми немаємо в ній знаходитись\"\n  },\n  {\n    \"nameText\": \"git push origin --delete 'назва-гілки'\",\n    \"text\": \"Це робить тім лід - видалення гілки з github робимо в тому випадку тім лід не налаштував автомотичне видалення\"\n  },\n\n  {\n    \"nameText\": \"git merge --abort\",\n    \"text\": \"Відміняє злиття гілок в тому випадко якщо ти вже зробив git merge 'назва-гілки' і в тебе вийшли конфлікти але ти не можеш сам їх виправити\"\n  },\n\n  {\n    \"nameText\": \"git diff\",\n    \"text\": \"Зміни які ви внесли в свій код після останнього коміта\"\n  },\n\n  {\n    \"nameText\": \"git log\",\n    \"text\": \"переглянути всю історію комітів\"\n  },\n\n  {\n    \"nameText\": \"git remote add origin SSH-URL\",\n    \"text\": \"Для прив`язки твого локального репозиторію до GitHub, де SSH-URL — це той шлях, що було скопійовано в попередньому кроці, наприклад:git remote add origin git@github.com:Nataliia-goit/remote_repository.git\"\n  },\n\n  {\n    \"nameText\": \"git remote set-url\",\n    \"text\": \"наприклад:git remote set-url origin git@github.com:Nataliia-goit/remote_repository.git Ця команда змінить SSH-URL на новий.\"\n  },\n\n  {\n    \"nameText\": \"git rm --cached <file>\",\n    \"text\": \"Якщо ти хочеш, щоб зміни файлу my-passwords.txt ніколи не потрапляли до комітів і вилучити його з індексу назавжди, то це можна зробити за допомогою команди git rm --cached my-passwords.txt\"\n  },\n\n  {\n    \"nameText\": \"git reset <file>\",\n    \"text\": \"Однак, якщо ти хочеш зберегти зміни у файлі my-passwords.txt локально і просто вилучити його з поточного індексу, щоб він не потрапив до наступного коміту, ти можеш скористатися командою git reset my-passwords.txt\"\n  },\n\n  {\n    \"nameText\": \"git reset\",\n    \"text\": \"Якщо ж ти хочеш скинути стан індексу для всіх файлів до останнього коміту і скасувати всі зміни, які були додані до індексу (staging area), використовуй команду git reset без вказання файлу\"\n  },\n\n  {\n    \"nameText\": \"git commit --amend\",\n    \"text\": \"Це відкриє текстовий редактор з останнім повідомленням коміту, яке ти можеш відредагувати. Якщо ти хочеш залишити повідомлення без змін, просто збережи та закрий редактор. Якщо ж ти хочеш змінити повідомлення коміту, додай опцію -**m** з новим текстом повідомлення: git commit --amend -m 'add a new task and item to shopping list' Опція --amend змінює історію комітів, створюючи новий коміт із новим хешем (ідентифікатором). Це може створити проблеми для спільної роботи, якщо змінений коміт уже був відправлений на віддалений репозиторій і ці зміни витягнув хтось інший. Тому опцію --amend варто використовувати тільки для локальних комітів, які ще не були відправлені до віддаленого репозиторію.\"\n  },\n\n  {\n    \"nameText\": \"git log -n <quantity>\",\n    \"text\": \"Кількість комітів Наприклад, ця команда покаже два останні коміти git log -n 2\"\n  },\n\n  {\n    \"nameText\": \"git log --since=<times_period>\",\n    \"text\": \"Наприклад ця команда покаже коміти, які були створені протягом останніх двох тижнів: git log --since=2.weeks\"\n  },\n\n  {\n    \"nameText\": \"git log --author='author name'\",\n    \"text\": \"Фільтрація за автором Наприклад ця команда покаже коміти, які було створені автором nataliia git log --author='nataliia'\"\n  }\n]\n","const refs = {\n  UlEl: document.getElementById('hero-list'),\n};\n\nexport { refs };\n","function createRenderingItems(arr, element) {\n  const murkup = arr\n    .map(({ link, nameLink, textLink }, index) => {\n      return `\n    <div class=\"wrapper-hero\">\n            <li\n              class=\"hero-header__item hero-header__item--numbers\"\n            >${index + 1}</li>\n            <li class=\"hero-header__item hero-header__item--links\">\n              <a\n                href=\"${link}\"\n                target=\"_blank\" \n                rel=\"noopener norefferer nofollow\"\n                class=\"hero-header__link\"\n                >${nameLink}</a\n              >\n            </li>\n            <li class=\"hero-header__item hero-header__item--texts\">\n              ${textLink}\n            </li>\n    </div>\n          `;\n    })\n    .join('');\n\n  element.insertAdjacentHTML('beforeend', murkup);\n}\n\nfunction createRenderingItemsGitComands(arr, element) {\n  const murkup = arr\n    .map(({ nameText, text }, index) => {\n      return `\n    <div class=\"wrapper-hero\">\n            <li\n              class=\"hero-header__item hero-header__item--numbers\"\n            >${index + 1}</li>\n            <li class=\"hero-header__item hero-header__item--links color-text\">${nameText}</li>\n            <li class=\"hero-header__item hero-header__item--texts\">${text}</li>\n    </div>\n          `;\n    })\n    .join('');\n\n  element.insertAdjacentHTML('beforeend', murkup);\n}\n\nexport { createRenderingItems, createRenderingItemsGitComands };\n","import { comandsItems } from './items/comands-github-items';\nimport { createRenderingItemsGitComands } from './helpers/function-rendering-items';\nimport { refs } from './common/const';\n\ncreateRenderingItemsGitComands(comandsItems, refs.UlEl);\n"],"names":["$d9ca4941905a8392$exports","JSON","parse","$f5890d4370c441c7$export$21666b427502ea6d","UlEl","document","getElementById","arr","element","murkup","map","nameText","text","index","join","insertAdjacentHTML","comandsItems"],"version":3,"file":"comands-github.035e8505.js.map"}